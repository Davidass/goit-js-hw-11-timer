{"version":3,"sources":["js/timer.js"],"names":["refs","days","document","querySelector","hours","mins","secs","clockface","btnStart","btnStop","CountdownTimer","constructor","selector","targetDate","onTimer","intervalId","isActive","init","time","updateClockface","start","startTime","setInterval","currentTime","Date","now","deltaTime","stop","clearInterval","pad","Math","floor","value","String","padStart","showClockFace","textContent","timer","addEventListener","bind"],"mappings":";AAAA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,2BAC7BC,MAAOF,SAASC,cAAc,4BAC9BE,KAAMH,SAASC,cAAc,2BAC7BG,KAAMJ,SAASC,cAAc,2BAE7BI,UAAWL,SAASC,cAAc,iBAElCK,SAAUN,SAASC,cAAc,6BACjCM,QAASP,SAASC,cAAc,6BAGlC,MAAMO,EACJC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,QAAwBC,IAC7BC,KAAAA,WAAa,KACbH,KAAAA,SAAWV,SAASC,cAAcS,GAClCI,KAAAA,UAAW,EACXH,KAAAA,WAAaA,EACbC,KAAAA,QAAUA,EACVG,KAAAA,OAGPA,OACQC,MAAAA,EAAO,KAAKC,gBAAgB,GAC7BL,KAAAA,QAAQI,GAGfE,QACM,GAAA,KAAKJ,SACP,OAGIK,MAAAA,EAAY,KAAKR,WAClBG,KAAAA,UAAW,EAEXD,KAAAA,WAAaO,YAAY,KACtBC,MAAAA,EAAcC,KAAKC,MACnBC,EAAYL,EAAYE,EACxBL,EAAO,KAAKC,gBAAgBO,GAE7BZ,KAAAA,QAAQI,IACZ,KAGLS,OACEC,cAAc,KAAKb,YACdC,KAAAA,UAAW,EACVE,MAAAA,EAAO,KAAKC,gBAAgB,GAC7BL,KAAAA,QAAQI,GAGfC,gBAAgBD,GA4BP,MAAA,CAAEjB,KAvBI,KAAK4B,IAAIC,KAAKC,MAAMb,EAAQ,QAuB1Bd,MAhBD,KAAKyB,IACjBC,KAAKC,MAAOb,EAAQ,MAAyB,OAezBb,KART,KAAKwB,IAAIC,KAAKC,MAAOb,EAAQ,KAAoB,MAQlCZ,KAFf,KAAKuB,IAAIC,KAAKC,MAAOb,EAAQ,IAAc,OAM1DW,IAAIG,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,SAASC,GAAc,KAAElC,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAC1CN,EAAKC,KAAKmC,eAAiBnC,IAC3BD,EAAKI,MAAMgC,eAAiBhC,IAC5BJ,EAAKK,KAAK+B,eAAiB/B,IAC3BL,EAAKM,KAAK8B,eAAiB9B,IAG7B,MAAM+B,EAAQ,IAAI3B,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIW,KAAK,KAAM,EAAG,EAAG,EAAG,GACpCV,QAASqB,IAGXnC,EAAKQ,SAAS8B,iBAAiB,QAASD,EAAMjB,MAAMmB,KAAKF,IACzDrC,EAAKS,QAAQ6B,iBAAiB,QAASD,EAAMV,KAAKY,KAAKF","file":"timer.4f44cb53.js","sourceRoot":"..\\src","sourcesContent":["const refs = {\r\n  days: document.querySelector('span[data-value=\"days\"]'),\r\n  hours: document.querySelector('span[data-value=\"hours\"]'),\r\n  mins: document.querySelector('span[data-value=\"mins\"]'),\r\n  secs: document.querySelector('span[data-value=\"secs\"]'),\r\n\r\n  clockface: document.querySelector('.js-clockface'),\r\n\r\n  btnStart: document.querySelector('.btn[data-active=\"start\"]'),\r\n  btnStop: document.querySelector('.btn[data-active=\"stop\"]'),\r\n};\r\n\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate, onTimer }) {\r\n    this.intervalId = null;\r\n    this.selector = document.querySelector(selector);\r\n    this.isActive = false;\r\n    this.targetDate = targetDate;\r\n    this.onTimer = onTimer;\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    const time = this.updateClockface(0);\r\n    this.onTimer(time);\r\n  }\r\n\r\n  start() {\r\n    if (this.isActive) {\r\n      return;\r\n    }\r\n\r\n    const startTime = this.targetDate;\r\n    this.isActive = true;\r\n\r\n    this.intervalId = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      const deltaTime = startTime - currentTime;\r\n      const time = this.updateClockface(deltaTime);\r\n\r\n      this.onTimer(time);\r\n    }, 1000);\r\n  }\r\n\r\n  stop() {\r\n    clearInterval(this.intervalId);\r\n    this.isActive = false;\r\n    const time = this.updateClockface(0);\r\n    this.onTimer(time);\r\n  }\r\n\r\n  updateClockface(time) {\r\n    /*\r\n     * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n     * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n     */\r\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n\r\n    /*\r\n     * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n     * остатка % и делим его на количество миллисекунд в одном часе\r\n     * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n     */\r\n    const hours = this.pad(\r\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n    );\r\n\r\n    /*\r\n     * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n     * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n     */\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n\r\n    /*\r\n     * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n     * миллисекунд в одной секунде (1000)\r\n     */\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    return { days, hours, mins, secs };\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n}\r\n\r\nfunction showClockFace({ days, hours, mins, secs }) {\r\n  refs.days.textContent = `${days}`;\r\n  refs.hours.textContent = `${hours}`;\r\n  refs.mins.textContent = `${mins}`;\r\n  refs.secs.textContent = `${secs}`;\r\n}\r\n\r\nconst timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date(2021, 0, 1, 0, 0),\r\n  onTimer: showClockFace,\r\n});\r\n\r\nrefs.btnStart.addEventListener('click', timer.start.bind(timer));\r\nrefs.btnStop.addEventListener('click', timer.stop.bind(timer));\r\n"]}